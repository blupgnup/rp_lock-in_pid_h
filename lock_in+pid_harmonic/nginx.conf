

location /lock_in+pid_harmonic/get_ip {
    default_type plain/text;
    add_header Content-Type "text/html";
    content_by_lua '
        ngx.say(ngx.var.remote_addr )
    ';
}


location /lock_in+pid_harmonic/lock {
    default_type plain/text;
    add_header Content-Type "text/html";

    content_by_lua '
        local data = ngx.req.get_uri_args()

        local newline = string.char(10)..string.char(13)
        local cmd = "/opt/redpitaya/www/apps/lock_in+pid_harmonic/c/lock"
        for kk,vv in pairs(data) do
            cmd  =  cmd .." ".. kk .. " " .. vv
        end
        -- ngx.say( cmd )

        local file   = io.popen( cmd )
        local output = file:read("*all")

        -- This will get a table with some return stuff
        -- rc[1] will be true, false or nil
        -- rc[3] will be the signal
        local rc = {file:close()}

        ngx.print( output )
    ';
}



location /lock_in+pid_harmonic/osc {
    default_type plain/text;
    add_header Content-Type "text/html";

    content_by_lua '
        local data = ngx.req.get_uri_args()

        local newline = string.char(10)..string.char(13)
        local cmd = "/opt/redpitaya/www/apps/lock_in+pid_harmonic/c/osc"
        for kk,vv in pairs(data) do
            cmd  =  cmd .." ".. kk .. " " .. vv
        end
        -- ngx.say( cmd )

        local file   = io.popen( cmd )
        local output = file:read("*all")

        -- This will get a table with some return stuff
        -- rc[1] will be true, false or nil
        -- rc[3] will be the signal
        local rc = {file:close()}

        ngx.print( output )
    ';
}

location /lock_in+pid_harmonic/calib {
    default_type plain/text;
    add_header Content-Type "text/html";

    content_by_lua '
        local file   = io.popen( "/opt/redpitaya/bin/calib -rv" )
        local output = file:read("*all")
        local rc = {file:close()}
        ngx.print( output )
    ';
}


location /lock_in+pid_harmonic/streaming {
    default_type plain/text;
    add_header Content-Type "text/html";
    content_by_lua '
        io.popen("/opt/redpitaya/www/apps/lock_in+pid_harmonic/c/streaming", "r")
        ngx.say("OK")
    ';
}

location /lock_in+pid_harmonic/check_streaming {
    default_type plain/text;
    add_header Content-Type "text/html";
    content_by_lua '
        local rta = os.execute("/bin/pidof /opt/redpitaya/www/apps/lock_in+pid_harmonic/c/streaming");
        ngx.say(rta)
    ';
}


location /lock_in+pid_harmonic/restart_server {
    default_type plain/text;
    add_header Content-Type "text/html";
    content_by_lua '
        os.execute("systemctl restart redpitaya_nginx");
        ngx.log(ngx.STDERR, "restart_server");
        ngx.say("see you soon")
    ';
}

location /lock_in+pid_harmonic/reload_fpga {
    default_type plain/text;
    add_header Content-Type "text/html";
    content_by_lua '
        -- Examples of files:
        -- /opt/redpitaya/www/apps/lock_in+pid_harmonic/red_pitaya.bit
        -- /opt/redpitaya/fpga/fpga.bit
        local rta = os.execute("/bin/bash /opt/redpitaya/www/apps/lock_in+pid_harmonic/c/load_bit.sh /opt/redpitaya/www/apps/lock_in+pid_harmonic/red_pitaya.bit");
        ngx.log(ngx.STDERR, "reload_fpga");
        ngx.say(rta)
    ';
}
